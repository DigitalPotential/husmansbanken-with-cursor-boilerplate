name: CI/CD Pipeline

on:
  push:
    branches: [main, Github-actions-v2]
  pull_request:
    branches: [main, Github-actions-v2]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Node ${{ matrix.node }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: [18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: 'file:./test.db'
          NODE_ENV: 'test'

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: node_modules
          key: ubuntu-latest-node-20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ubuntu-latest-node-20-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/Github-actions-v2'
    runs-on: ubuntu-latest
    environment: github-actions

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Simulate staging deployment
        run: |
          echo "Starting deployment simulation to staging environment..."
          echo "Using staging configuration:"
          echo "DATABASE_URL: ${{ secrets.DATABASE_URL }}"
          echo "Artifact contents:"
          ls -la dist/
          echo "Staging deployment simulation completed successfully!"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Simulate production deployment
        run: |
          echo "Starting deployment simulation to production environment..."
          echo "Using production configuration:"
          echo "DATABASE_URL: ${{ secrets.DATABASE_URL }}"
          echo "Artifact contents:"
          ls -la dist/
          echo "Production deployment simulation completed successfully!"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
